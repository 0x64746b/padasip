<!doctype html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

    <title>padasip API documentation</title>
    <meta name="description" content="This library is designed to simplify the adaptive signal 
processing tasks with python
(filtering, p..." />

  <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,300' rel='stylesheet' type='text/css'>
  
  <style type="text/css">
  
* {
  box-sizing: border-box;
}
/*! normalize.css v1.1.1 | MIT License | git.io/normalize */

/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */

[hidden] {
    display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */

/**
 * 1. Prevent system color scheme's background color being used in Firefox, IE,
 *    and Opera.
 * 2. Prevent system color scheme's text color being used in Firefox, IE, and
 *    Opera.
 * 3. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 4. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
    background: #fff; /* 1 */
    color: #000; /* 2 */
    font-size: 100%; /* 3 */
    -webkit-text-size-adjust: 100%; /* 4 */
    -ms-text-size-adjust: 100%; /* 4 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */

html,
button,
input,
select,
textarea {
    font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */

body {
    margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */

a:focus {
    outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
    outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */

/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */

h1 {
    font-size: 2em;
    margin: 0.67em 0;
}

h2 {
    font-size: 1.5em;
    margin: 0.83em 0;
}

h3 {
    font-size: 1.17em;
    margin: 1em 0;
}

h4 {
    font-size: 1em;
    margin: 1.33em 0;
}

h5 {
    font-size: 0.83em;
    margin: 1.67em 0;
}

h6 {
    font-size: 0.67em;
    margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */

abbr[title] {
    border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */

b,
strong {
    font-weight: bold;
}

blockquote {
    margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */

dfn {
    font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */

mark {
    background: #ff0;
    color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */

p,
pre {
    margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    _font-family: 'courier new', monospace;
    font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */

pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */

q {
    quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */

q:before,
q:after {
    content: '';
    content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */

/**
 * Address margins set differently in IE 6/7.
 */

dl,
menu,
ol,
ul {
    margin: 1em 0;
}

dd {
    margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */

menu,
ol,
ul {
    padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */

nav ul,
nav ol {
    list-style: none;
    list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */

img {
    border: 0; /* 1 */
    -ms-interpolation-mode: bicubic; /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */

svg:not(:root) {
    overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */

figure {
    margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */

/**
 * Correct margin displayed oddly in IE 6/7.
 */

form {
    margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */

legend {
    border: 0; /* 1 */
    padding: 0;
    white-space: normal; /* 2 */
    *margin-left: -7px; /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */

button,
input,
select,
textarea {
    font-size: 100%; /* 1 */
    margin: 0; /* 2 */
    vertical-align: baseline; /* 3 */
    *vertical-align: middle; /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

button,
input {
    line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */

button,
select {
    text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
    *overflow: visible;  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
    cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
    *height: 13px; /* 3 */
    *width: 13px; /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
    border-collapse: collapse;
    border-spacing: 0;
}

  </style>

  <style type="text/css">
  
  html, body {
    margin: 0;
    padding: 0;
    min-height: 100%;
  }
  body {
    background: #fff;
    font-family: "Source Sans Pro", "Helvetica Neueue", Helvetica, sans;
    font-weight: 300;
    font-size: 16px;
    line-height: 1.6em;
  }
  #content {
    width: 70%;
    max-width: 850px;
    float: left;
    padding: 30px 60px;
    border-left: 1px solid #ddd;
  }
  #sidebar {
    width: 25%;
    float: left;
    padding: 30px;
    overflow: hidden;
  }
  #nav {
    font-size: 130%;
    margin: 0 0 15px 0;
  }

  #top {
    display: block;
    position: fixed;
    bottom: 5px;
    left: 5px;
    font-size: .85em;
    text-transform: uppercase;
  }

  #footer {
    font-size: .75em;
    padding: 5px 30px;
    border-top: 1px solid #ddd;
    text-align: right;
  }
    #footer p {
      margin: 0 0 0 30px;
      display: inline-block;
    }

  h1, h2, h3, h4, h5 {
    font-weight: 300;
  }
  h1 {
    font-size: 2.5em;
    line-height: 1.1em;
    margin: 0 0 .50em 0;
  }

  h2 {
    font-size: 1.75em;
    margin: 1em 0 .50em 0;
  }

  h3 {
    margin: 25px 0 10px 0;
  }

  h4 {
    margin: 0;
    font-size: 105%;
  }

  a {
    color: #058;
    text-decoration: none;
    transition: color .3s ease-in-out;
  }

  a:hover {
    color: #e08524;
    transition: color .3s ease-in-out;
  }

  pre, code, .mono, .name {
    font-family: "Ubuntu Mono", "Cousine", "DejaVu Sans Mono", monospace;
  }

  .title .name {
    font-weight: bold;
  }
  .section-title {
    margin-top: 2em;
  }
  .ident {
    color: #900;
  }

  code {
    background: #f9f9f9;
  } 

  pre {
    background: #fefefe;
    border: 1px solid #ddd;
    box-shadow: 2px 2px 0 #f3f3f3;
    margin: 0 30px;
    padding: 15px 30px;
  }

  .codehilite {
    margin: 0 30px 10px 30px;
  }

    .codehilite pre {
      margin: 0;
    }
    .codehilite .err { background: #ff3300; color: #fff !important; } 

  table#module-list {
    font-size: 110%;
  }

    table#module-list tr td:first-child {
      padding-right: 10px;
      white-space: nowrap;
    }

    table#module-list td {
      vertical-align: top;
      padding-bottom: 8px;
    }

      table#module-list td p {
        margin: 0 0 7px 0;
      }

  .def {
    display: table;
  }

    .def p {
      display: table-cell;
      vertical-align: top;
      text-align: left;
    }

    .def p:first-child {
      white-space: nowrap;
    }

    .def p:last-child {
      width: 100%;
    }


  #index {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
    ul#index .class_name {
      /* font-size: 110%; */
      font-weight: bold;
    }
    #index ul {
      margin: 0;
    }

  .item {
    margin: 0 0 15px 0;
  }

    .item .class {
      margin: 0 0 25px 30px;
    }

      .item .class ul.class_list {
        margin: 0 0 20px 0;
      }

    .item .name {
      background: #fafafa;
      margin: 0;
      font-weight: bold;
      padding: 5px 10px;
      border-radius: 3px;
      display: inline-block;
      min-width: 40%;
    }
      .item .name:hover {
        background: #f6f6f6;
      }

    .item .empty_desc {
      margin: 0 0 5px 0;
      padding: 0;
    }

    .item .inheritance {
      margin: 3px 0 0 30px;
    }

    .item .inherited {
      color: #666;
    }

    .item .desc {
      padding: 0 8px;
      margin: 0;
    }

      .item .desc p {
        margin: 0 0 10px 0;
      }

    .source_cont {
      margin: 0;
      padding: 0;
    }

    .source_link a {
      background: #ffc300;
      font-weight: 400;
      font-size: .75em;
      text-transform: uppercase;
      color: #fff;
      text-shadow: 1px 1px 0 #f4b700;
      
      padding: 3px 8px;
      border-radius: 2px;
      transition: background .3s ease-in-out;
    }
      .source_link a:hover {
        background: #FF7200;
        text-shadow: none;
        transition: background .3s ease-in-out;
      }

    .source {
      display: none;
      max-height: 600px;
      overflow-y: scroll;
      margin-bottom: 15px;
    }

      .source .codehilite {
        margin: 0;
      }

  .desc h1, .desc h2, .desc h3 {
    font-size: 100% !important;
  }
  .clear {
    clear: both;
  }

  @media all and (max-width: 950px) {
    #sidebar {
      width: 35%;
    }
    #content {
      width: 65%;
    }
  }
  @media all and (max-width: 650px) {
    #top {
      display: none;
    }
    #sidebar {
      float: none;
      width: auto;
    }
    #content {
      float: none;
      width: auto;
      padding: 30px;
    }

    #index ul {
      padding: 0;
      margin-bottom: 15px;
    }
    #index ul li {
      display: inline-block;
      margin-right: 30px;
    }
    #footer {
      text-align: left;
    }
    #footer p {
      display: block;
      margin: inherit;
    }
  }

  /*****************************/

  </style>


  <style type="text/css">
  
/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
    /* Style adjustments for viewports that meet the condition */
}

@media print,
       (-o-min-device-pixel-ratio: 5/4),
       (-webkit-min-device-pixel-ratio: 1.25),
       (min-resolution: 120dpi) {
    /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

  </style>

  <script type="text/javascript">
  function toggle(id, $link) {
    $node = document.getElementById(id);
    if (!$node)
    return;
    if (!$node.style.display || $node.style.display == 'none') {
    $node.style.display = 'block';
    $link.innerHTML = 'Hide source &nequiv;';
    } else {
    $node.style.display = 'none';
    $link.innerHTML = 'Show source &equiv;';
    }
  }
  </script>
</head>
<body>
<a href="#" id="top">Top</a>

<div id="container">
    
  
  <div id="sidebar">
    <h1>Index</h1>
    <ul id="index">

    <li class="set"><h3><a href="#header-functions">Functions</a></h3>
      
  <ul>
    <li class="mono"><a href="#padasip.input_from_history">input_from_history</a></li>
    <li class="mono"><a href="#padasip.lms_filter">lms_filter</a></li>
    <li class="mono"><a href="#padasip.lms_novelty">lms_novelty</a></li>
    <li class="mono"><a href="#padasip.nlms_filter">nlms_filter</a></li>
    <li class="mono"><a href="#padasip.nlms_novelty">nlms_novelty</a></li>
    <li class="mono"><a href="#padasip.rls_filter">rls_filter</a></li>
    <li class="mono"><a href="#padasip.rls_novelty">rls_novelty</a></li>
    <li class="mono"><a href="#padasip.standardize">standardize</a></li>
    <li class="mono"><a href="#padasip.standardize_back">standardize_back</a></li>
  </ul>

    </li>


    <li class="set"><h3><a href="#header-submodules">Sub-modules</a></h3>
      <ul>
        <li class="mono"><a href="padasip-consts.html">padasip.consts</a></li>
        <li class="mono"><a href="padasip-filters.html">padasip.filters</a></li>
      </ul>
    </li>
    </ul>
  </div>

    <article id="content">
      
  

  


  <header id="section-intro">
  <h1 class="title"><span class="name">padasip</span> module</h1>
  <p>This library is designed to simplify the adaptive signal 
processing tasks with python
(filtering, prediction, reconstruction, classification).
The library uses numpy for operations with arrays.</p>
<p>Also in this library is presented some new methods of
adaptive signal processing.
The library is designed to be used with datasets and also with 
real-time measuring (sample after sample feeding).</p>
<p>This library is developed by member of ASPICC http://aspicc.fs.cvut.cz/</p>
  
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip', this);">Show source &equiv;</a></p>
  <div id="source-padasip" class="source">
    <pre><code>"""
This library is designed to simplify the adaptive signal 
processing tasks with python
(filtering, prediction, reconstruction, classification).
The library uses numpy for operations with arrays.

Also in this library is presented some new methods of
adaptive signal processing.
The library is designed to be used with datasets and also with 
real-time measuring (sample after sample feeding).

This library is developed by member of ASPICC http://aspicc.fs.cvut.cz/
"""
import numpy as np
from padasip.filters import FilterLMS, FilterNLMS, FilterRLS
import padasip.consts as co


### LMS
def lms_filter(d, x, mu=co.MU_LMS, w="random"):
    """
    Proccess data with LMS filter.

    Args:

    * `d` - desired value (1 dimensional array)

    * `x` - input matrix (2-dimensional array). Rows are samples, colums are
        input arrays.

    Kwargs:

    * `mu` - learning rate (float). Also known as step size. If it is too slow,
        filter will perform badly. If it is too high,
        filter will be unstable. The default value can be unstable
        for ill conditioned input data.

    * `w` - initial weights of filter. Possible values are:
        
        * array with initial weights (1 dimensional array) of filter size
    
        * "random" - create random weights
        
        * "zeros" - create zero value weights
        
    Returns:

    * `y` - output value (1 dimensional array).
        The size correspons with desired value.

    * `e` - filter error for every sample (1 dimensional array). 
        The size correspons with desired value.

    * `w` - set of weights on the end of filtering (1 dimensional array). The size
        corresponds with filter size (length of input vector).

    Example:

        >>> import numpy as np
        >>> import adasipro as ap
        >>> x = np.random.random((10, 3))
        >>> d = np.sum(x, axis=1) # d = x1(k) + x2(k) + x3(k)
        >>> y, e, w = ap.lms_filter(d, x, mu=1.)
        >>> w
        array([ 1.0000086 ,  0.99996222,  1.00004785])


    """
    n = len(x[0])
    f = FilterLMS(n, mu, w)
    y, e, w = f.run(d, x)
    return y, e, w

def lms_novelty(d, x, mu=co.MU_LMS, w="random"):
    """
    Evaluate novelty in data with LMS filter. 

    Args:

    * `d` - desired value (1 dimensional array)

    * `x` - input matrix (2-dimensional array). Rows are samples, colums are
        input arrays.

    Kwargs:

    * `mu` - learning rate (float). Also known as step size. If it is too slow,
        filter will perform badly. If it is too high,
        filter will be unstable. The default value can be unstable
        for ill conditioned input data.

    * `w` - initial weights of filter. Possible values are:
        
        * array with initial weights (1 dimensional array) of filter size
    
        * "random" - create random weights
        
        * "zeros" - create zero value weights
        
    Returns:

    * `y` - output value (1 dimensional array).
        The size correspons with desired value.

    * `e` - filter error for every sample (1 dimensional array). 
        The size correspons with desired value.

    * `w` - history of all filter weighs (2 dimensional array).
        The size corresponds with lenght of data
        and filter size (length of input vector).

    * `nd` - coeficients describing novelty in data (2 dimensional array).
        The size corresponds with lenght of data
        and filter size (length of input vector).

    """
    n = len(x[0])
    f = FilterLMS(n, mu, w)
    y, e, w, nd = f.novelty(d, x)
    return y, e, w, nd


### NLMS
def nlms_filter(d, x, mu=co.MU_NLMS, eps=co.EPS_NLMS, w="random"):
    """
    Process data with LMS filter.
    """
    n = len(x[0])
    f = FilterNLMS(n, mu, eps, w)
    y, e, w = f.run(d, x)
    return y, e, w

def nlms_novelty(d, x, mu=co.MU_NLMS, eps=co.EPS_NLMS, w="random"):
    """
    Evaluate novelty in data with LMS filter.
    """
    n = len(x[0])
    f = FilterNLMS(n, mu, eps, w)
    y, e, w, nd = f.novelty(d, x)
    return y, e, w, nd


### RLS
def rls_filter(d, x, mu=co.MU_RLS, eps=co.EPS_RLS, w="zeros"):
    """
    Process data with LMS filter.
    """
    n = len(x[0])
    f = FilterRLS(n, mu, eps, w)
    y, e, w = f.run(d, x)
    return y, e, w

def rls_novelty(d, x, mu=co.MU_RLS, eps=co.EPS_RLS, w="zeros"):
    """
    Evaluate novelty in data with LMS filter.
    """
    n = len(x[0])
    f = FilterRLS(n, mu, eps, w)
    y, e, w, nd = f.novelty(d, x)
    return y, e, w, nd





### data normalization

def standardize(x, offset=None, scale=None):
    """
    This function standardize the series.

    xs = (x - offset) / scale

    Args:

    * `x` - series (1 dimensional array)

    Kwargs:

    * `offset` - offset to remove (float). If not given,
        the mean value of `x` is used.

    * `scale` - scale (float). If not given,
        the standart deviation of `x` is used.
        
    Returns:

    * `xs` - standardized series

    Example:

        >>> x = np.random.random(1000)
        >>> x.mean()
        0.49755420774866677
        >>> x.std()
        0.29015765297767376
        >>> xs = ap.standardize(x)
        >>> xs.mean()
        1.4123424652012772e-16
        >>> xs.std()
        0.99999999999999989

    """
    if offset == None:
        offset = np.array(x).mean()
    else:
        try:
            offset = float(offset)
        except:
            raise ValueError('The argument offset is not None or float') 
    if scale == None:
        scale = np.array(x).std()
    else:
        try:
            scale = float(scale)
        except:
            raise ValueError('The argument scale is not None or float')    
    try:
        xs = np.array(xs, dtype="float64")
    except:
        raise ValueError('The argument x is not numpy array or similar.')         
    return (x - offset) / scale
    

def standardize_back(xs, offset, scale):
    """
    This function transform series to original score.

    x = xs * scale + offset

    Args:

    * `xs` - standardized input (1 dimensional array)

    * `offset` - offset to add (float).

    * `scale` - scale (float).
        
    Returns:

    * `x` - original (destandardized) series
    """
    try:
        offset = float(offset)
    except:
        raise ValueError('The argument offset is not None or float.') 
    try:
        scale = float(scale)
    except:
        raise ValueError('The argument scale is not None or float.')
    try:
        xs = np.array(xs, dtype="float64")
    except:
        raise ValueError('The argument xs is not numpy array or similar.')
    return xs*scale + offset


### INPUT MATRIX constructors

def input_from_history(a, n, bias=False):
    """
    This function creates input matrix from historical values.

    Args:

    * `a` - serries (1 dimensional array)

    * `n` - size of input matrix row (int).
        It means how many samples from history you want to use
        as filter input. It also represents the filter length.

    Kwargs:

    * `bias` - decide if the bias is used (Boolean). If True,
        array of all ones is appended as a last column to matrix `x`.
        So matrix `x` has `n`+1 columns.

    Returns:

    * `x` - input matrix (2 dimensional array)
        constructed from array `a`. The length of `x`
        is calculated as length of `a` - `n` + 1. 
        If the `bias` is used, than amount of columns is `n` if not than
        amount of columns is `n`+1).

    Example:

        >>> a = np.arange(1, 7, 1)
        >>> a
        array([1, 2, 3, 4, 5, 6])
        >>> ap.input_from_history(a,3)
        array([[1, 2, 3],
               [2, 3, 4],
               [3, 4, 5],
               [4, 5, 6]])
    """
    if not type(n) == int:
        raise ValueError('The argument n must be int.')
    if not n > 0:
        raise ValueError('The argument n must be greater than 0')
    try:
        a = np.array(a, dtype="float64")
    except:
        raise ValueError('The argument a is not numpy array or similar.')
    x = np.array([a[i:i+n] for i in range(len(a)-n+1)]) 
    if bias:
        x = np.vstack((x.T, np.ones(len(x)))).T
    return x












</code></pre>
  </div>

  </header>

  <section id="section-items">

    <h2 class="section-title" id="header-functions">Functions</h2>
      
  <div class="item">
    <div class="name def" id="padasip.input_from_history">
    <p>def <span class="ident">input_from_history</span>(</p><p>a, n, bias=False)</p>
    </div>
    

    
  
    <div class="desc"><p>This function creates input matrix from historical values.</p>
<p>Args:</p>
<ul>
<li>
<p><code>a</code> - serries (1 dimensional array)</p>
</li>
<li>
<p><code>n</code> - size of input matrix row (int).
    It means how many samples from history you want to use
    as filter input. It also represents the filter length.</p>
</li>
</ul>
<p>Kwargs:</p>
<ul>
<li><code>bias</code> - decide if the bias is used (Boolean). If True,
    array of all ones is appended as a last column to matrix <code>x</code>.
    So matrix <code>x</code> has <code>n</code>+1 columns.</li>
</ul>
<p>Returns:</p>
<ul>
<li><code>x</code> - input matrix (2 dimensional array)
    constructed from array <code>a</code>. The length of <code>x</code>
    is calculated as length of <code>a</code> - <code>n</code> + 1. 
    If the <code>bias</code> is used, than amount of columns is <code>n</code> if not than
    amount of columns is <code>n</code>+1).</li>
</ul>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; a = np.arange(1, 7, 1)
&gt;&gt;&gt; a
array([1, 2, 3, 4, 5, 6])
&gt;&gt;&gt; ap.input_from_history(a,3)
array([[1, 2, 3],
       [2, 3, 4],
       [3, 4, 5],
       [4, 5, 6]])
</code></pre></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.input_from_history', this);">Show source &equiv;</a></p>
  <div id="source-padasip.input_from_history" class="source">
    <pre><code>def input_from_history(a, n, bias=False):
    """
    This function creates input matrix from historical values.

    Args:

    * `a` - serries (1 dimensional array)

    * `n` - size of input matrix row (int).
        It means how many samples from history you want to use
        as filter input. It also represents the filter length.

    Kwargs:

    * `bias` - decide if the bias is used (Boolean). If True,
        array of all ones is appended as a last column to matrix `x`.
        So matrix `x` has `n`+1 columns.

    Returns:

    * `x` - input matrix (2 dimensional array)
        constructed from array `a`. The length of `x`
        is calculated as length of `a` - `n` + 1. 
        If the `bias` is used, than amount of columns is `n` if not than
        amount of columns is `n`+1).

    Example:

        >>> a = np.arange(1, 7, 1)
        >>> a
        array([1, 2, 3, 4, 5, 6])
        >>> ap.input_from_history(a,3)
        array([[1, 2, 3],
               [2, 3, 4],
               [3, 4, 5],
               [4, 5, 6]])
    """
    if not type(n) == int:
        raise ValueError('The argument n must be int.')
    if not n > 0:
        raise ValueError('The argument n must be greater than 0')
    try:
        a = np.array(a, dtype="float64")
    except:
        raise ValueError('The argument a is not numpy array or similar.')
    x = np.array([a[i:i+n] for i in range(len(a)-n+1)]) 
    if bias:
        x = np.vstack((x.T, np.ones(len(x)))).T
    return x
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.lms_filter">
    <p>def <span class="ident">lms_filter</span>(</p><p>d, x, mu=0.01, w=&#39;random&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Proccess data with LMS filter.</p>
<p>Args:</p>
<ul>
<li>
<p><code>d</code> - desired value (1 dimensional array)</p>
</li>
<li>
<p><code>x</code> - input matrix (2-dimensional array). Rows are samples, colums are
    input arrays.</p>
</li>
</ul>
<p>Kwargs:</p>
<ul>
<li>
<p><code>mu</code> - learning rate (float). Also known as step size. If it is too slow,
    filter will perform badly. If it is too high,
    filter will be unstable. The default value can be unstable
    for ill conditioned input data.</p>
</li>
<li>
<p><code>w</code> - initial weights of filter. Possible values are:</p>
<ul>
<li>
<p>array with initial weights (1 dimensional array) of filter size</p>
</li>
<li>
<p>"random" - create random weights</p>
</li>
<li>
<p>"zeros" - create zero value weights</p>
</li>
</ul>
</li>
</ul>
<p>Returns:</p>
<ul>
<li>
<p><code>y</code> - output value (1 dimensional array).
    The size correspons with desired value.</p>
</li>
<li>
<p><code>e</code> - filter error for every sample (1 dimensional array). 
    The size correspons with desired value.</p>
</li>
<li>
<p><code>w</code> - set of weights on the end of filtering (1 dimensional array). The size
    corresponds with filter size (length of input vector).</p>
</li>
</ul>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import adasipro as ap
&gt;&gt;&gt; x = np.random.random((10, 3))
&gt;&gt;&gt; d = np.sum(x, axis=1) # d = x1(k) + x2(k) + x3(k)
&gt;&gt;&gt; y, e, w = ap.lms_filter(d, x, mu=1.)
&gt;&gt;&gt; w
array([ 1.0000086 ,  0.99996222,  1.00004785])
</code></pre></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.lms_filter', this);">Show source &equiv;</a></p>
  <div id="source-padasip.lms_filter" class="source">
    <pre><code>def lms_filter(d, x, mu=co.MU_LMS, w="random"):
    """
    Proccess data with LMS filter.

    Args:

    * `d` - desired value (1 dimensional array)

    * `x` - input matrix (2-dimensional array). Rows are samples, colums are
        input arrays.

    Kwargs:

    * `mu` - learning rate (float). Also known as step size. If it is too slow,
        filter will perform badly. If it is too high,
        filter will be unstable. The default value can be unstable
        for ill conditioned input data.

    * `w` - initial weights of filter. Possible values are:
        
        * array with initial weights (1 dimensional array) of filter size
    
        * "random" - create random weights
        
        * "zeros" - create zero value weights
        
    Returns:

    * `y` - output value (1 dimensional array).
        The size correspons with desired value.

    * `e` - filter error for every sample (1 dimensional array). 
        The size correspons with desired value.

    * `w` - set of weights on the end of filtering (1 dimensional array). The size
        corresponds with filter size (length of input vector).

    Example:

        >>> import numpy as np
        >>> import adasipro as ap
        >>> x = np.random.random((10, 3))
        >>> d = np.sum(x, axis=1) # d = x1(k) + x2(k) + x3(k)
        >>> y, e, w = ap.lms_filter(d, x, mu=1.)
        >>> w
        array([ 1.0000086 ,  0.99996222,  1.00004785])


    """
    n = len(x[0])
    f = FilterLMS(n, mu, w)
    y, e, w = f.run(d, x)
    return y, e, w
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.lms_novelty">
    <p>def <span class="ident">lms_novelty</span>(</p><p>d, x, mu=0.01, w=&#39;random&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Evaluate novelty in data with LMS filter. </p>
<p>Args:</p>
<ul>
<li>
<p><code>d</code> - desired value (1 dimensional array)</p>
</li>
<li>
<p><code>x</code> - input matrix (2-dimensional array). Rows are samples, colums are
    input arrays.</p>
</li>
</ul>
<p>Kwargs:</p>
<ul>
<li>
<p><code>mu</code> - learning rate (float). Also known as step size. If it is too slow,
    filter will perform badly. If it is too high,
    filter will be unstable. The default value can be unstable
    for ill conditioned input data.</p>
</li>
<li>
<p><code>w</code> - initial weights of filter. Possible values are:</p>
<ul>
<li>
<p>array with initial weights (1 dimensional array) of filter size</p>
</li>
<li>
<p>"random" - create random weights</p>
</li>
<li>
<p>"zeros" - create zero value weights</p>
</li>
</ul>
</li>
</ul>
<p>Returns:</p>
<ul>
<li>
<p><code>y</code> - output value (1 dimensional array).
    The size correspons with desired value.</p>
</li>
<li>
<p><code>e</code> - filter error for every sample (1 dimensional array). 
    The size correspons with desired value.</p>
</li>
<li>
<p><code>w</code> - history of all filter weighs (2 dimensional array).
    The size corresponds with lenght of data
    and filter size (length of input vector).</p>
</li>
<li>
<p><code>nd</code> - coeficients describing novelty in data (2 dimensional array).
    The size corresponds with lenght of data
    and filter size (length of input vector).</p>
</li>
</ul></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.lms_novelty', this);">Show source &equiv;</a></p>
  <div id="source-padasip.lms_novelty" class="source">
    <pre><code>def lms_novelty(d, x, mu=co.MU_LMS, w="random"):
    """
    Evaluate novelty in data with LMS filter. 

    Args:

    * `d` - desired value (1 dimensional array)

    * `x` - input matrix (2-dimensional array). Rows are samples, colums are
        input arrays.

    Kwargs:

    * `mu` - learning rate (float). Also known as step size. If it is too slow,
        filter will perform badly. If it is too high,
        filter will be unstable. The default value can be unstable
        for ill conditioned input data.

    * `w` - initial weights of filter. Possible values are:
        
        * array with initial weights (1 dimensional array) of filter size
    
        * "random" - create random weights
        
        * "zeros" - create zero value weights
        
    Returns:

    * `y` - output value (1 dimensional array).
        The size correspons with desired value.

    * `e` - filter error for every sample (1 dimensional array). 
        The size correspons with desired value.

    * `w` - history of all filter weighs (2 dimensional array).
        The size corresponds with lenght of data
        and filter size (length of input vector).

    * `nd` - coeficients describing novelty in data (2 dimensional array).
        The size corresponds with lenght of data
        and filter size (length of input vector).

    """
    n = len(x[0])
    f = FilterLMS(n, mu, w)
    y, e, w, nd = f.novelty(d, x)
    return y, e, w, nd
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.nlms_filter">
    <p>def <span class="ident">nlms_filter</span>(</p><p>d, x, mu=0.1, eps=1.0, w=&#39;random&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Process data with LMS filter.</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.nlms_filter', this);">Show source &equiv;</a></p>
  <div id="source-padasip.nlms_filter" class="source">
    <pre><code>def nlms_filter(d, x, mu=co.MU_NLMS, eps=co.EPS_NLMS, w="random"):
    """
    Process data with LMS filter.
    """
    n = len(x[0])
    f = FilterNLMS(n, mu, eps, w)
    y, e, w = f.run(d, x)
    return y, e, w
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.nlms_novelty">
    <p>def <span class="ident">nlms_novelty</span>(</p><p>d, x, mu=0.1, eps=1.0, w=&#39;random&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Evaluate novelty in data with LMS filter.</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.nlms_novelty', this);">Show source &equiv;</a></p>
  <div id="source-padasip.nlms_novelty" class="source">
    <pre><code>def nlms_novelty(d, x, mu=co.MU_NLMS, eps=co.EPS_NLMS, w="random"):
    """
    Evaluate novelty in data with LMS filter.
    """
    n = len(x[0])
    f = FilterNLMS(n, mu, eps, w)
    y, e, w, nd = f.novelty(d, x)
    return y, e, w, nd
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.rls_filter">
    <p>def <span class="ident">rls_filter</span>(</p><p>d, x, mu=0.99, eps=0.1, w=&#39;zeros&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Process data with LMS filter.</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.rls_filter', this);">Show source &equiv;</a></p>
  <div id="source-padasip.rls_filter" class="source">
    <pre><code>def rls_filter(d, x, mu=co.MU_RLS, eps=co.EPS_RLS, w="zeros"):
    """
    Process data with LMS filter.
    """
    n = len(x[0])
    f = FilterRLS(n, mu, eps, w)
    y, e, w = f.run(d, x)
    return y, e, w
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.rls_novelty">
    <p>def <span class="ident">rls_novelty</span>(</p><p>d, x, mu=0.99, eps=0.1, w=&#39;zeros&#39;)</p>
    </div>
    

    
  
    <div class="desc"><p>Evaluate novelty in data with LMS filter.</p></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.rls_novelty', this);">Show source &equiv;</a></p>
  <div id="source-padasip.rls_novelty" class="source">
    <pre><code>def rls_novelty(d, x, mu=co.MU_RLS, eps=co.EPS_RLS, w="zeros"):
    """
    Evaluate novelty in data with LMS filter.
    """
    n = len(x[0])
    f = FilterRLS(n, mu, eps, w)
    y, e, w, nd = f.novelty(d, x)
    return y, e, w, nd
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.standardize">
    <p>def <span class="ident">standardize</span>(</p><p>x, offset=None, scale=None)</p>
    </div>
    

    
  
    <div class="desc"><p>This function standardize the series.</p>
<p>xs = (x - offset) / scale</p>
<p>Args:</p>
<ul>
<li><code>x</code> - series (1 dimensional array)</li>
</ul>
<p>Kwargs:</p>
<ul>
<li>
<p><code>offset</code> - offset to remove (float). If not given,
    the mean value of <code>x</code> is used.</p>
</li>
<li>
<p><code>scale</code> - scale (float). If not given,
    the standart deviation of <code>x</code> is used.</p>
</li>
</ul>
<p>Returns:</p>
<ul>
<li><code>xs</code> - standardized series</li>
</ul>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; x = np.random.random(1000)
&gt;&gt;&gt; x.mean()
0.49755420774866677
&gt;&gt;&gt; x.std()
0.29015765297767376
&gt;&gt;&gt; xs = ap.standardize(x)
&gt;&gt;&gt; xs.mean()
1.4123424652012772e-16
&gt;&gt;&gt; xs.std()
0.99999999999999989
</code></pre></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.standardize', this);">Show source &equiv;</a></p>
  <div id="source-padasip.standardize" class="source">
    <pre><code>def standardize(x, offset=None, scale=None):
    """
    This function standardize the series.

    xs = (x - offset) / scale

    Args:

    * `x` - series (1 dimensional array)

    Kwargs:

    * `offset` - offset to remove (float). If not given,
        the mean value of `x` is used.

    * `scale` - scale (float). If not given,
        the standart deviation of `x` is used.
        
    Returns:

    * `xs` - standardized series

    Example:

        >>> x = np.random.random(1000)
        >>> x.mean()
        0.49755420774866677
        >>> x.std()
        0.29015765297767376
        >>> xs = ap.standardize(x)
        >>> xs.mean()
        1.4123424652012772e-16
        >>> xs.std()
        0.99999999999999989

    """
    if offset == None:
        offset = np.array(x).mean()
    else:
        try:
            offset = float(offset)
        except:
            raise ValueError('The argument offset is not None or float') 
    if scale == None:
        scale = np.array(x).std()
    else:
        try:
            scale = float(scale)
        except:
            raise ValueError('The argument scale is not None or float')    
    try:
        xs = np.array(xs, dtype="float64")
    except:
        raise ValueError('The argument x is not numpy array or similar.')         
    return (x - offset) / scale
</code></pre>
  </div>
</div>

  </div>
  
      
  <div class="item">
    <div class="name def" id="padasip.standardize_back">
    <p>def <span class="ident">standardize_back</span>(</p><p>xs, offset, scale)</p>
    </div>
    

    
  
    <div class="desc"><p>This function transform series to original score.</p>
<p>x = xs * scale + offset</p>
<p>Args:</p>
<ul>
<li>
<p><code>xs</code> - standardized input (1 dimensional array)</p>
</li>
<li>
<p><code>offset</code> - offset to add (float).</p>
</li>
<li>
<p><code>scale</code> - scale (float).</p>
</li>
</ul>
<p>Returns:</p>
<ul>
<li><code>x</code> - original (destandardized) series</li>
</ul></div>
  <div class="source_cont">
  <p class="source_link"><a href="javascript:void(0);" onclick="toggle('source-padasip.standardize_back', this);">Show source &equiv;</a></p>
  <div id="source-padasip.standardize_back" class="source">
    <pre><code>def standardize_back(xs, offset, scale):
    """
    This function transform series to original score.

    x = xs * scale + offset

    Args:

    * `xs` - standardized input (1 dimensional array)

    * `offset` - offset to add (float).

    * `scale` - scale (float).
        
    Returns:

    * `x` - original (destandardized) series
    """
    try:
        offset = float(offset)
    except:
        raise ValueError('The argument offset is not None or float.') 
    try:
        scale = float(scale)
    except:
        raise ValueError('The argument scale is not None or float.')
    try:
        xs = np.array(xs, dtype="float64")
    except:
        raise ValueError('The argument xs is not numpy array or similar.')
    return xs*scale + offset
</code></pre>
  </div>
</div>

  </div>
  


    <h2 class="section-title" id="header-submodules">Sub-modules</h2>
      <div class="item">
      <p class="name"><a href="consts.m.html">padasip.consts</a></p>
      
  
    <div class="desc"><p>In this file are stored the settings (constants) for the module.
This settings are often used in multiple files,
that is the reason why it is all in one file.</p></div>

      </div>
      <div class="item">
      <p class="name"><a href="filters.m.html">padasip.filters</a></p>
      
  

      </div>
  </section>

    </article>
  <div class="clear"> </div>
  <footer id="footer">
    <p>
      Documentation generated by
      <a href="https://github.com/BurntSushi/pdoc">pdoc 0.3.2</a>
    </p>

    <p>pdoc is in the public domain with the
      <a href="http://unlicense.org">UNLICENSE</a></p>

    <p>Design by <a href="http://nadh.in">Kailash Nadh</a></p>
  </footer>
</div>
</body>
</html>
